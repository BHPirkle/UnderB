<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initializes a few variables.

alpha = 0;
print = "";
time = 0;
a = 0;
b = 0;
i = 1;
xtra = 0;
char[0] = "";
textString = "                  ";
depth = depth - instance_number(obj_text);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Stores characters from the string.
while (a &lt; textLength) {
        // While the char and the progress is less than the length then keep going until they are equal.

        char[a] = string_byte_at(text, a + 1);
        
        a++;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Renders the text box and the text.
// Text box does not create itself in a viewable position at certain times.

draw_set_alpha(1);
// Sets the alpha of the drawing.

draw_set_color(c_white);
draw_rectangle
(   16, 160, 
    304, 235, 
    false
);
// Text box outline.

draw_set_color(c_black);
draw_rectangle
(
    19, 163, 
    301, 232, 
    false
);
// Actual text box.

draw_set_color(c_white);
draw_set_font(font);
// Sets the font and color for the printed string.

draw_set_halign(fa_left);
// Aligns the text left, horizontally.
draw_set_valign(fa_top);
// Aligns the text to the top, vertically.

draw_text
(
    19,
    163,
    textString
);

if (a &lt; (textLength * 2)) {
    string_set_byte_at(char[b], textString, i);
    
    show_message(textString);

    audio_play_sound(sound, 2, false);
    
    a++;
    b++;
    i++;
}
// Draws text with the padding, character by character.
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Old copy, just in case.

/*
/// Renders the text box and the text.
// When set to fullscreen, box is smaller. Doesn't matter for now, but fix later.
draw_set_alpha(alpha);
// Sets the alpha of the drawing.

alpha = 1;

// Determines if alpha is 1 (opaque) or not, if not then it slowly makes it opaque.

draw_set_font(font);
// Sets the font for the printed string.

draw_set_color(c_white);
draw_rectangle(view_wport[0] - (304 * 2), view_hport[0] - (80 * 2), view_wport[0] - (16 * 2), view_hport[0] - (5 * 2), false);
// Text box outline.

draw_set_color(c_black);
draw_rectangle(view_wport[0] - (301 * 2), view_hport[0] - (77 * 2), view_wport[0] - (19 * 2), view_hport[0] - (8 * 2), false);
// Actual text box.

draw_set_color(c_white);

// Sets the drawing color to white again (maybe erase this?).
draw_set_halign(fa_left);
// Aligns the text left, horizontally.
draw_set_valign(fa_top);
// Aligns the text to the top, vertically.
// show_message("Pre-drawing of text.");
while (a &lt; (textLength * 2)) {
    draw_text_ext
    (
        (view_wport[0] - (301 * 2)) + padding,
        (view_hport[0] - (77 * 2)) + padding,
        char[b],
        font_size + (font_size / 2),
        max_length
    );
    // show_message("char[" + string(b) + "] = " + string(char[b]));
    
    audio_play_sound(sound, 2, false);
    
    a++;
    b++;
}
// show_message("Post-drawing of text.");
// Draws text with the padding, character by character.

draw_set_alpha(1);
// Sets the alpha of the drawing to 1 (opaque).
*/
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
