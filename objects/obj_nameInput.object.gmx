<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gets characters and sets position.
x = 120;
y = 150;

// Cursor?
horz = 0;
vert = 0;
menu = 0;

// Creates the array "characters" and a starting point.
characters[0] = "";
lowercaseCharacters[0] = "";
var c = 0;
var lC = 0;

// Loops through to fill up the characters array.
for (var i = 65; i &lt; 91; i++) {
    char = i;

    characters[c] = chr(char);
    
    c++;
}

for (var i = 97; i &lt; 123; i++) {
    char = i;
    
    lowercaseCharacters[lC] = chr(char);
    
    lC++;
}

display_set_gui_size(640, 480);
global.username = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draws the (hopefully temporary) cursor.
draw_set_alpha(1);

if (menu == 2) {
    if (horz == 0) draw_sprite(spr_cursor, 1, 100, 410);
    if (horz == 1) draw_sprite(spr_cursor, 1, 218, 410);
    if (horz == 2) draw_sprite(spr_cursor, 1, 418, 410);
    
    if (keyboard_check_pressed(vk_left)) horz--;
    if (keyboard_check_pressed(vk_right)) horz++;
    if (horz &lt; 0) horz = 2;
    if (horz &gt; 2) horz = 0;
    
    if (keyboard_check_pressed(vk_up)) {menu = 1; vert = 3; horz = 4;}
}
if (menu == 1) {
    draw_sprite(spr_cursor, 0, 120 + (horz * 64), 280 + (vert * 28));
    
    if (keyboard_check_pressed(vk_left)) horz--;
    if (keyboard_check_pressed(vk_right)) horz++;
    if (horz &lt; 0) horz = 6;
    if (horz &gt; 6) horz = 0;
    
    if (keyboard_check_pressed(vk_up)) vert--;
    if (keyboard_check_pressed(vk_down)) vert++;
    
    if (horz &lt;= 7 &amp;&amp; horz &gt;= 0)
    {
        if (vert &gt; 3) {menu = 2; vert = 0; horz = 1;}
        if (vert &lt; 0) {menu = 0; vert = 3;}
    }
    
    if (vert == 3) {
        if (horz &gt; 4) {horz = 0;}
    }
}
if (menu == 0) {
    draw_sprite(spr_cursor, 0, 118 + (horz * 64), 160 + (vert * 28));
    
    if (keyboard_check_pressed(vk_left)) horz--;
    if (keyboard_check_pressed(vk_right)) horz++;
    if (horz &lt; 0) horz = 6;
    if (horz &gt; 6) horz = 0;
    
    if (keyboard_check_pressed(vk_up)) vert--;
    if (keyboard_check_pressed(vk_down)) vert++;
    
    if (horz &lt;= 7 &amp;&amp; horz &gt;= 0)
    {
        if (vert &gt; 3) {menu = 1; vert = 0;}
        if (vert &lt; 0) {vert = 0;}
    }
    
    if (vert == 3) {
        if (horz &gt; 4) {horz = 0;}
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Interact with the menu.
GetInput();
draw_set_alpha(1);

if (keyboard_check_pressed(vk_enter)) {
    if (string_length(global.username) &lt; 6) {
    if (menu == 0) {
        global.username += characters[horz + (7 * vert)];
    }
    
    if (menu == 1) {
        global.username += lowercaseCharacters[horz + (7 * vert)];
    }
    }
    
    if (menu == 2) {
        if (horz == 0) {global.username = ""; room_goto(rm_menu);}
        if (horz == 1) global.username = string_copy(global.username, 0, string_length(global.username) - 1);
        if (horz == 2) {
            room_goto(rm_confirm);
        }
    }
}

if (back) global.username = string_copy(global.username, 0, string_length(global.username) - 1);

// Draws the name.
draw_set_halign(fa_left);
draw_text(278, 114, global.username);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draws the characters.
draw_set_color(c_white);
draw_set_halign(fa_left);
draw_set_font(fnt_8bit);
draw_set_alpha(1);

// Draws sentance above the text.
draw_text(180, 68, "Name the fallen human.")

var line = 0;
var space = 0;
var lineEnd = 6;

// Draws interactive buttons.
draw_text(120, 400, "Quit");
draw_text(240, 400, "Backspace");
draw_text(440, 400, "Done");

for (var i = 0; i &lt; array_length_1d(characters); i++) {
    if (space &gt; lineEnd)
    {
        space = 0;
        line++;
    }
    
    draw_text(x + (space * 64) + random_range(0, 1), y + (line * 28) + random_range(0, 1), characters[i]);
    
    space++;
}

space = 0;

for (var i = 0; i &lt; array_length_1d(lowercaseCharacters); i++) {
    if (space &gt; lineEnd)
    {
        space = 0;
        line++;
    }
    
    draw_text(x + (space * 64) + random_range(0, 1), (y + 36) + (line * 28) + random_range(0, 1), lowercaseCharacters[i]);
    
    space++;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
