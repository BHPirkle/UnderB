<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_global</spriteName>
  <solid>0</solid>
  <visible>0</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initiates variables.
if (room_get_name(room) == "rm_name") {global.username = ""; display_set_gui_size(320, 240)}
global.timePlayed = 0;
global.timeRecorded = 0;
var closeTimer = 0;
debug = true;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Controls and actions.
close = keyboard_check(vk_escape); // Close game key.
fullscreen = keyboard_check_pressed(vk_f4); // Fullscreen key.
keyboard_set_map(ord("F"), vk_f4); // Maps F(ullscreen) to the fullscreen key.

// Make sure to disable this on release.
if (debug) {
    nextRoom = keyboard_check_released(vk_numpad6); // Next room key.
    previousRoom = keyboard_check_released(vk_numpad4); // Previous room key.
    showCollisions = keyboard_check_released(ord("C")); // Key that shows collision boxes.
}

if (close) {
    closeTimer += 3 / room_speed;
    if (closeTimer &gt;= 3) game_end();
} else if (!close) {
    closeTimer = 0;
}

if (fullscreen) {
    if (!window_get_fullscreen()) {
        window_set_fullscreen(true);
    } else {
        window_set_fullscreen(false);
    }
}

// Debug keys.
if (debug) {
    if (nextRoom) {
        room_goto_next();
    }
            
    if (previousRoom) {
        room_goto_previous();
    }
            
    if (showCollisions) {
        if (instance_exists(obj_object_parent)) obj_object_parent.visible = true;
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Adds time to time played.
global.timePlayed += 1 / room_speed;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draws quitting stuff.
draw_set_alpha(1);
if (closeTimer &lt;= 1 and closeTimer &gt; 0) draw_sprite_ext(spr_closing0, 0, 0, 0, 2, 2, 0, c_white, 1);
if (closeTimer &lt;= 2 and closeTimer &gt; 1) draw_sprite_ext(spr_closing1, 0, 0, 0, 2, 2, 0, c_white, 1);
if (closeTimer &lt;= 3 and closeTimer &gt; 2) draw_sprite_ext(spr_closing2, 0, 0, 0, 2, 2, 0, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
