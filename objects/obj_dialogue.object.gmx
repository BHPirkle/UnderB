<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Initiates variables.
message_current = 0;
message_end = 0;
timer = 0;
cutoff = 0;
portrait = "none";
sound = sfx_text;
font = fnt_8bit;
alarm[0] = 1;

i = 0;
currentChar = 0;
delay = 0;
t = 0;
amplitude = 20;
freq = 2;
increment = 1;

done = false;

display_set_gui_size(640, 480);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Plays sounds.
if (string_char_at(message[message_current], i) != " " and cutoff &lt; string_length(message[message_current])) 
{ 
    audio_play_sound(sound, 1, false); 
}

if (sound == sfx_desc) alarm[0] = 2.3;
if (sound == sfx_whisper) alarm[0] = 3;
if (sound == sfx_sans) alarm[0] = 2.3;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draws the actual box.

{
    // Draws the box.
    draw_set_color(c_white);
    draw_rectangle
    (   
        32, 320, 
        608, 470, 
        false
    );
    // Text box outline.
        
    draw_set_color(c_black);
    draw_rectangle
    (
        38, 326, 
        602, 464, 
        false
    );
    // Actual text box.
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draws the text.
GetInput();

draw_set_font(font);
draw_set_colour(c_white);

t++;

// How many messages are in the array.
message_end = array_length_1d(message);

if (message_end &gt; 0) {
    // Variables.
    switch (font)
    {
        case fnt_8bit: // 8Bit Operator JVE
        {
            var charWidth = 16;
            break;
        }
        
        case fnt_sans: // Comic Sans MS
        {
            var charWidth = 16;
            break;
        }
    }
    var lineEnd = 30;
    var line = 0;
    var space = 0;
    var i = 1;
    delay = 0;
    
    // Text position.
    var tY = 340;
    if (portrait == "none") var tX = 60;
    else var tX = 110
    /*
    var tY = view_hview[0] - 55;
    if (portrait == "none") var tX = 5;
    else var tX = 60;
    */
    
    
    // Next message.
    if (interact) {
        // If we still have some more messages, go to the next one.
        if (message_current &lt; message_end - 1) {
            message_current++;
            cutoff = 0;
        }
        // If we don't, we're done.
        else {
            done = true;
        }
    }
    
    if (cutoff &lt; string_length(message[message_current])) {
        if (timer &gt;= delay) {
            cutoff++;
            timer = 0;
        } else {
            timer++;
        }
    }
    
    // Draw text.
    while(i &lt;= string_length(message[message_current]) &amp;&amp; i &lt;= cutoff) {
        // Checks for a modifier.
        if (string_char_at(message[message_current], i) == "\") {
            mod0 = string_char_at(message[message_current], ++i);
            ++i;
        }
        
        // Go to the next line.
        var length = 0;
        while (string_char_at(message[message_current], i) != " " &amp;&amp; i &lt;= string_length(message[message_current])) {
            i++;
            length++;
        }
        
        if (space + length &gt; lineEnd) {
            space = 2;
            line += 2.8;
        }
        i -= length;
        
        // Text
        switch (mod0) {
            case "W": // White text.
            {
                draw_set_color(c_white);
                draw_text(tX + (space * charWidth), tY + (13 * line), string_char_at(message[message_current], i));
                break;  
            }
            
            case "Y": // Sets the color to yellow.
            {
                draw_set_color(c_yellow);
                draw_text(tX + (space * charWidth), tY + (13 * line), string_char_at(message[message_current], i));
                break;
            }
            
            case "R": // Sets the color to red.
            {
                draw_set_color(c_red);
                draw_text(tX + (space * charWidth), tY + (13 * line), string_char_at(message[message_current], i));
                break;
            }
            
            case "S": // Shaky text.
            {
                draw_text(tX + (space * charWidth) + random_range(-15, 10), tY + (13 * line) + random_range(-10, 15), string_char_at(message[message_current], i));
                break;    
            }
            
            case "N": // Next line.
            {
                space = -1;
                line += 2.8;
                
                draw_text(tX + (space * charWidth), tY + (13 * line), string_char_at(message[message_current], i));
                break;
            }
            
            case "T": // Sine movement, which is a wave.
            {
                var so = t + i;
                var shift = sin(so * pi * freq / room_speed) * amplitude;
                draw_set_color(c_white);
                draw_text(tX + (space * charWidth), tY + (13 * line) + shift, string_char_at(message[message_current], i));
                break;
            }
            
            case "G": // Gradient, color-changing text.
            {
                var col = make_color_hsv(t + i, 255, 255);
                var col2 = make_color_hsv(t + i + 75, 255, 255);
                draw_text_transformed_color(tX + (space * charWidth), tY + (13 * line), string_char_at(message[message_current], i), 1, 1, 0, col, col, col2, col2, 1);
                break;
            }
            
            case "Z": // Combination of 5 and 6.
            {
                var so = t + i;
                var shift = sin(so * pi * freq / room_speed) * amplitude;
                var col = make_color_hsv(t + i, 255, 255);
                var col2 = make_color_hsv(t + i + 75, 255, 255);
                draw_text_transformed_color(tX + (space * charWidth), tY + (13 * line) + shift, string_char_at(message[message_current], i), 1, 1, 0, col, col, col2, col2, 1);
                break;
            }
        }
        
        space++;
        i++;
    }
    
    // Draws portrait.
    switch (portrait) {
        case "none":
        {
            break;
        }
        
        case "sans":
        {
            draw_sprite(spr_portrait, 0, 38, 326);
            break;
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
