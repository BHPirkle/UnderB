<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Gets characters and sets position.
x = 120;
y = 150;

row = 1;
char = 0;

// First row.
keyboard[1, 0] = "A";
keyboard[1, 1] = "B";
keyboard[1, 2] = "C";
keyboard[1, 3] = "D";
keyboard[1, 4] = "E";
keyboard[1, 5] = "F";
keyboard[1, 6] = "G";

// Second row.
keyboard[2, 0] = "H";
keyboard[2, 1] = "I";
keyboard[2, 2] = "J";
keyboard[2, 3] = "K";
keyboard[2, 4] = "L";
keyboard[2, 5] = "M";
keyboard[2, 6] = "N";

// Third row.
keyboard[3, 0] = "O";
keyboard[3, 1] = "P";
keyboard[3, 2] = "Q";
keyboard[3, 3] = "R";
keyboard[3, 4] = "S";
keyboard[3, 5] = "T";
keyboard[3, 6] = "U";

// Fourth row.
keyboard[4, 0] = "V";
keyboard[4, 1] = "W";
keyboard[4, 2] = "X";
keyboard[4, 3] = "Y";
keyboard[4, 4] = "Z";

// Fifth row.
keyboard[5, 0] = "a";
keyboard[5, 1] = "b";
keyboard[5, 2] = "c";
keyboard[5, 3] = "d";
keyboard[5, 4] = "e";
keyboard[5, 5] = "f";
keyboard[5, 6] = "g";

// Sixth row.
keyboard[6, 0] = "h";
keyboard[6, 1] = "i";
keyboard[6, 2] = "j";
keyboard[6, 3] = "k";
keyboard[6, 4] = "l";
keyboard[6, 5] = "m";
keyboard[6, 6] = "n";

// Seventh row.
keyboard[7, 0] = "o";
keyboard[7, 1] = "p";
keyboard[7, 2] = "q";
keyboard[7, 3] = "r";
keyboard[7, 4] = "s";
keyboard[7, 5] = "t";
keyboard[7, 6] = "u";

// Eighth row.
keyboard[8, 0] = "v";
keyboard[8, 1] = "w";
keyboard[8, 2] = "x";
keyboard[8, 3] = "y";
keyboard[8, 4] = "z";

// Options.
keyboard[9, 0] = "Quit";
keyboard[9, 1] = "Backspace";
keyboard[9, 2] = "Done";

// Colors.
color[0] = c_white;
color[1] = c_white;
color[2] = c_white;
color[3] = c_white;
color[4] = c_white;
color[5] = c_white;
color[6] = c_white;
color[7] = c_white;
color[8] = c_white;
color[9] = c_white;
color[10] = c_white;
color[11] = c_white;
color[12] = c_white;
color[13] = c_white;
color[14] = c_white;
color[15] = c_white;
color[16] = c_white;
color[17] = c_white;
color[18] = c_white;
color[19] = c_white;
color[20] = c_white;
color[21] = c_white;
color[22] = c_white;
color[23] = c_white;
color[24] = c_white;
color[25] = c_white;
color[26] = c_white;
color[27] = c_white;
color[28] = c_white;
color[29] = c_white;
color[30] = c_white;
color[31] = c_white;
color[32] = c_white;
color[33] = c_white;
color[34] = c_white;
color[35] = c_white;
color[36] = c_white;
color[37] = c_white;
color[38] = c_white;
color[39] = c_white;
color[40] = c_white;
color[41] = c_white;
color[42] = c_white;
color[43] = c_white;
color[44] = c_white;
color[45] = c_white;
color[46] = c_white;
color[47] = c_white;
color[48] = c_white;
color[49] = c_white;
color[50] = c_white;
color[51] = c_white;
color[52] = c_white;
color[53] = c_white;
color[54] = c_white;

display_set_gui_size(640, 480);
global.username = "";
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draws the (hopefully temporary) cursor.
draw_set_alpha(1);

if (keyboard_check_pressed(vk_up)) {
    if (row == 9) {row = 8; char = 4}
    else if (row == 5 and char &gt; 4) {row -= 2}
    else if (row == 1) {row = 9; char = 1}
    else {row--}
    
}

if (keyboard_check_pressed(vk_down)) {
    if (row == 9 and char == 0) {row = 1; char = 0}
    else if (row == 9 and char == 1) {row = 1; char = 3}
    else if (row == 9 and char == 2) {row = 1; char = 5}
    else if (row == 3 and char &gt; 4) {row += 2}
    else if (row == 8) {row++; char = 1}
    else {row++}
}

if (row &lt; 1) {row = 9; char = 1}
if (row &gt; 9) {row = 1; char = 0}

if (keyboard_check_pressed(vk_left)) char--;
if (keyboard_check_pressed(vk_right)) char++;

if (char &lt; 0 and row == 5) {row--; char = 4};
if (char &lt; 0 and row == 9) {row--; char = 4}
if (char &gt; 6) {row++; char = 0}
if (char &lt; 0 and row != 1) {row--; char = 6}
if (char &lt; 0 and row == 1) {row = 1; char = 0;}
if (char &gt; 4 and row == 4) {row++; char = 0}
if (char &gt; 4 and row == 8) {row++; char = 0}
if (char &gt; 2 and row == 9) {row = 9; char = 2}

// Colors.
color[0] = c_white;
if (row == 1 and char == 0) color[0] = c_yellow;
color[1] = c_white;
if (row == 1 and char == 1) color[1] = c_yellow;
color[2] = c_white;
if (row == 1 and char == 2) color[2] = c_yellow;
color[3] = c_white;
if (row == 1 and char == 3) color[3] = c_yellow;
color[4] = c_white;
if (row == 1 and char == 4) color[4] = c_yellow;
color[5] = c_white;
if (row == 1 and char == 5) color[5] = c_yellow;
color[6] = c_white;
if (row == 1 and char == 6) color[6] = c_yellow;
color[7] = c_white;
if (row == 2 and char == 0) color[7] = c_yellow;
color[8] = c_white;
if (row == 2 and char == 1) color[8] = c_yellow;
color[9] = c_white;
if (row == 2 and char == 2) color[9] = c_yellow;
color[10] = c_white;
if (row == 2 and char == 3) color[10] = c_yellow;
color[11] = c_white;
if (row == 2 and char == 4) color[11] = c_yellow;
color[12] = c_white;
if (row == 2 and char == 5) color[12] = c_yellow;
color[13] = c_white;
if (row == 2 and char == 6) color[13] = c_yellow;
color[14] = c_white;
if (row == 3 and char == 0) color[14] = c_yellow;
color[15] = c_white;
if (row == 3 and char == 1) color[15] = c_yellow;
color[16] = c_white;
if (row == 3 and char == 2) color[16] = c_yellow;
color[17] = c_white;
if (row == 3 and char == 3) color[17] = c_yellow;
color[18] = c_white;
if (row == 3 and char == 4) color[18] = c_yellow;
color[19] = c_white;
if (row == 3 and char == 5) color[19] = c_yellow;
color[20] = c_white;
if (row == 3 and char == 6) color[20] = c_yellow;
color[21] = c_white;
if (row == 4 and char == 0) color[21] = c_yellow;
color[22] = c_white;
if (row == 4 and char == 1) color[22] = c_yellow;
color[23] = c_white;
if (row == 4 and char == 2) color[23] = c_yellow;
color[24] = c_white;
if (row == 4 and char == 3) color[24] = c_yellow;
color[25] = c_white;
if (row == 4 and char == 4) color[25] = c_yellow;

color[26] = c_white;
if (row == 5 and char == 0) color[26] = c_yellow;
color[27] = c_white;
if (row == 5 and char == 1) color[27] = c_yellow;
color[28] = c_white;
if (row == 5 and char == 2) color[28] = c_yellow;
color[29] = c_white;
if (row == 5 and char == 3) color[29] = c_yellow;
color[30] = c_white;
if (row == 5 and char == 4) color[30] = c_yellow;
color[31] = c_white;
if (row == 5 and char == 5) color[31] = c_yellow;
color[32] = c_white;
if (row == 5 and char == 6) color[32] = c_yellow;
color[33] = c_white;
if (row == 6 and char == 0) color[33] = c_yellow;
color[34] = c_white;
if (row == 6 and char == 1) color[34] = c_yellow;
color[35] = c_white;
if (row == 6 and char == 2) color[35] = c_yellow;
color[36] = c_white;
if (row == 6 and char == 3) color[36] = c_yellow;
color[37] = c_white;
if (row == 6 and char == 4) color[37] = c_yellow;
color[38] = c_white;
if (row == 6 and char == 5) color[38] = c_yellow;
color[39] = c_white;
if (row == 6 and char == 6) color[39] = c_yellow;
color[40] = c_white;
if (row == 7 and char == 0) color[40] = c_yellow;
color[41] = c_white;
if (row == 7 and char == 1) color[41] = c_yellow;
color[42] = c_white;
if (row == 7 and char == 2) color[42] = c_yellow;
color[43] = c_white;
if (row == 7 and char == 3) color[43] = c_yellow;
color[44] = c_white;
if (row == 7 and char == 4) color[44] = c_yellow;
color[45] = c_white;
if (row == 7 and char == 5) color[45] = c_yellow;
color[46] = c_white;
if (row == 7 and char == 6) color[46] = c_yellow;
color[47] = c_white;
if (row == 8 and char == 0) color[47] = c_yellow;
color[48] = c_white;
if (row == 8 and char == 1) color[48] = c_yellow;
color[49] = c_white;
if (row == 8 and char == 2) color[49] = c_yellow;
color[50] = c_white;
if (row == 8 and char == 3) color[50] = c_yellow;
color[51] = c_white;
if (row == 8 and char == 4) color[51] = c_yellow;

color[52] = c_white;
if (row == 9 and char == 0) color[52] = c_yellow;
color[53] = c_white;
if (row == 9 and char == 1) color[53] = c_yellow;
color[54] = c_white;
if (row == 9 and char == 2) color[54] = c_yellow;

/*
draw_set_alpha(1);

if (menu == 2) {
    if (horz == 0) draw_sprite(spr_cursor, 1, 100, 410);
    if (horz == 1) draw_sprite(spr_cursor, 1, 218, 410);
    if (horz == 2) draw_sprite(spr_cursor, 1, 418, 410);
    
    if (keyboard_check_pressed(vk_left)) horz--;
    if (keyboard_check_pressed(vk_right)) horz++;
    if (horz &lt; 0) horz = 2;
    if (horz &gt; 2) horz = 0;
    
    if (keyboard_check_pressed(vk_up)) {menu = 1; vert = 3; horz = 4;}
}
if (menu == 1) {
    draw_sprite(spr_cursor, 0, 120 + (horz * 64), 280 + (vert * 28));
    
    if (keyboard_check_pressed(vk_left)) horz--;
    if (keyboard_check_pressed(vk_right)) horz++;
    if (horz &lt; 0) horz = 6;
    if (horz &gt; 6) horz = 0;
    
    if (keyboard_check_pressed(vk_up)) vert--;
    if (keyboard_check_pressed(vk_down)) vert++;
    
    if (horz &lt;= 7 &amp;&amp; horz &gt;= 0)
    {
        if (vert &gt; 3) {menu = 2; vert = 0; horz = 1;}
        if (vert &lt; 0) {menu = 0; vert = 3;}
    }
    
    if (vert == 3) {
        if (horz &gt; 4) {horz = 0;}
    }
}
if (menu == 0) {
    draw_sprite(spr_cursor, 0, 118 + (horz * 64), 160 + (vert * 28));
    
    if (keyboard_check_pressed(vk_left)) horz--;
    if (keyboard_check_pressed(vk_right)) horz++;
    if (horz &lt; 0) horz = 6;
    if (horz &gt; 6) horz = 0;
    
    if (keyboard_check_pressed(vk_up)) vert--;
    if (keyboard_check_pressed(vk_down)) vert++;
    
    if (horz &lt;= 7 &amp;&amp; horz &gt;= 0)
    {
        if (vert &gt; 3) {menu = 1; vert = 0;}
        if (vert &lt; 0) {vert = 0;}
    }
    
    if (vert == 3) {
        if (horz &gt; 4) {horz = 0;}
    }
}
*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Interact with the menu.
GetInput();
draw_set_alpha(1);

if (interact) {
    if (string_length(global.username) &lt; 6) {
    
    if (row &lt; 9) {
        global.username += keyboard[row, char];
    }
}

    if (row == 9) {
        if (char == 0) {global.username = ""; room_goto(rm_menu);}
        if (char == 1) global.username = string_copy(global.username, 0, string_length(global.username) - 1);
        if (char == 2) {
            room_goto(rm_confirm);
        }
    }
}

if (back) global.username = string_copy(global.username, 0, string_length(global.username) - 1);

// Draws the name.
draw_set_halign(fa_left);
draw_set_color(c_white);
draw_text(278, 114, global.username);

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Draws the characters.
draw_set_halign(fa_left);
draw_set_font(fnt_8bit);
draw_set_alpha(1);

// Draws sentance above the text.
draw_set_color(c_white);
draw_text(180, 68, "Name the fallen human.")

draw_set_color(color[0]);
draw_text(x + (64 * 0) + random_range(0, 1), y + (28 * 0) + random_range(0, 1), "A");
draw_set_color(color[1]);
draw_text(x + (64 * 1) + random_range(0, 1), y + (28 * 0) + random_range(0, 1), "B")
draw_set_color(color[2]);
draw_text(x + (64 * 2) + random_range(0, 1), y + (28 * 0) + random_range(0, 1), "C");
draw_set_color(color[3]);
draw_text(x + (64 * 3) + random_range(0, 1), y + (28 * 0) + random_range(0, 1), "D");
draw_set_color(color[4]);
draw_text(x + (64 * 4) + random_range(0, 1), y + (28 * 0) + random_range(0, 1), "E");
draw_set_color(color[5]);
draw_text(x + (64 * 5) + random_range(0, 1), y + (28 * 0) + random_range(0, 1), "F");
draw_set_color(color[6]);
draw_text(x + (64 * 6) + random_range(0, 1), y + (28 * 0) + random_range(0, 1), "G");
draw_set_color(color[7]);
draw_text(x + (64 * 0) + random_range(0, 1), y + (28 * 1) + random_range(0, 1), "H");
draw_set_color(color[8]);
draw_text(x + (64 * 1) + random_range(0, 1), y + (28 * 1) + random_range(0, 1), "I");
draw_set_color(color[9]);
draw_text(x + (64 * 2) + random_range(0, 1), y + (28 * 1) + random_range(0, 1), "J");
draw_set_color(color[10]);
draw_text(x + (64 * 3) + random_range(0, 1), y + (28 * 1) + random_range(0, 1), "K");
draw_set_color(color[11]);
draw_text(x + (64 * 4) + random_range(0, 1), y + (28 * 1) + random_range(0, 1), "L");
draw_set_color(color[12]);
draw_text(x + (64 * 5) + random_range(0, 1), y + (28 * 1) + random_range(0, 1), "M");
draw_set_color(color[13]);
draw_text(x + (64 * 6) + random_range(0, 1), y + (28 * 1) + random_range(0, 1), "N");
draw_set_color(color[14]);
draw_text(x + (64 * 0) + random_range(0, 1), y + (28 * 2) + random_range(0, 1), "O");
draw_set_color(color[15]);
draw_text(x + (64 * 1) + random_range(0, 1), y + (28 * 2) + random_range(0, 1), "P");
draw_set_color(color[16]);
draw_text(x + (64 * 2) + random_range(0, 1), y + (28 * 2) + random_range(0, 1), "Q");
draw_set_color(color[17]);
draw_text(x + (64 * 3) + random_range(0, 1), y + (28 * 2) + random_range(0, 1), "R");
draw_set_color(color[18]);
draw_text(x + (64 * 4) + random_range(0, 1), y + (28 * 2) + random_range(0, 1), "S");
draw_set_color(color[19]);
draw_text(x + (64 * 5) + random_range(0, 1), y + (28 * 2) + random_range(0, 1), "T");
draw_set_color(color[20]);
draw_text(x + (64 * 6) + random_range(0, 1), y + (28 * 2) + random_range(0, 1), "U");
draw_set_color(color[21]);
draw_text(x + (64 * 0) + random_range(0, 1), y + (28 * 3) + random_range(0, 1), "V");
draw_set_color(color[22]);
draw_text(x + (64 * 1) + random_range(0, 1), y + (28 * 3) + random_range(0, 1), "W");
draw_set_color(color[23]);
draw_text(x + (64 * 2) + random_range(0, 1), y + (28 * 3) + random_range(0, 1), "X");
draw_set_color(color[24]);
draw_text(x + (64 * 3) + random_range(0, 1), y + (28 * 3) + random_range(0, 1), "Y");
draw_set_color(color[25]);
draw_text(x + (64 * 4) + random_range(0, 1), y + (28 * 3) + random_range(0, 1), "Z");

draw_set_color(color[26]);
draw_text(x + (64 * 0) + random_range(0, 1), ((y + (28 * 3)) + 36) + (28 * 0) + random_range(0, 1), "a");
draw_set_color(color[27]);
draw_text(x + (64 * 1) + random_range(0, 1), ((y + (28 * 3)) + 36) + (28 * 0) + random_range(0, 1), "b")
draw_set_color(color[28]);
draw_text(x + (64 * 2) + random_range(0, 1), ((y + (28 * 3)) + 36) + (28 * 0) + random_range(0, 1), "c");
draw_set_color(color[29]);
draw_text(x + (64 * 3) + random_range(0, 1), ((y + (28 * 3)) + 36) + (28 * 0) + random_range(0, 1), "d");
draw_set_color(color[30]);
draw_text(x + (64 * 4) + random_range(0, 1), ((y + (28 * 3)) + 36) + (28 * 0) + random_range(0, 1), "e");
draw_set_color(color[31]);
draw_text(x + (64 * 5) + random_range(0, 1), ((y + (28 * 3)) + 36) + (28 * 0) + random_range(0, 1), "f");
draw_set_color(color[32]);
draw_text(x + (64 * 6) + random_range(0, 1), ((y + (28 * 3)) + 36) + (28 * 0) + random_range(0, 1), "g");
draw_set_color(color[33]);
draw_text(x + (64 * 0) + random_range(0, 1), ((y + (28 * 3)) + 36) + (28 * 1) + random_range(0, 1), "h");
draw_set_color(color[34]);
draw_text(x + (64 * 1) + random_range(0, 1), ((y + (28 * 3)) + 36) + (28 * 1) + random_range(0, 1), "i");
draw_set_color(color[35]);
draw_text(x + (64 * 2) + random_range(0, 1), ((y + (28 * 3)) + 36) + (28 * 1) + random_range(0, 1), "j");
draw_set_color(color[36]);
draw_text(x + (64 * 3) + random_range(0, 1), ((y + (28 * 3)) + 36) + (28 * 1) + random_range(0, 1), "k");
draw_set_color(color[37]);
draw_text(x + (64 * 4) + random_range(0, 1), ((y + (28 * 3)) + 36) + (28 * 1) + random_range(0, 1), "l");
draw_set_color(color[38]);
draw_text(x + (64 * 5) + random_range(0, 1), ((y + (28 * 3)) + 36) + (28 * 1) + random_range(0, 1), "m");
draw_set_color(color[39]);
draw_text(x + (64 * 6) + random_range(0, 1), ((y + (28 * 3)) + 36) + (28 * 1) + random_range(0, 1), "n");
draw_set_color(color[40]);
draw_text(x + (64 * 0) + random_range(0, 1), ((y + (28 * 3)) + 36) + (28 * 2) + random_range(0, 1), "o");
draw_set_color(color[41]);
draw_text(x + (64 * 1) + random_range(0, 1), ((y + (28 * 3)) + 36) + (28 * 2) + random_range(0, 1), "p");
draw_set_color(color[42]);
draw_text(x + (64 * 2) + random_range(0, 1), ((y + (28 * 3)) + 36) + (28 * 2) + random_range(0, 1), "q");
draw_set_color(color[43]);
draw_text(x + (64 * 3) + random_range(0, 1), ((y + (28 * 3)) + 36) + (28 * 2) + random_range(0, 1), "r");
draw_set_color(color[44]);
draw_text(x + (64 * 4) + random_range(0, 1), ((y + (28 * 3)) + 36) + (28 * 2) + random_range(0, 1), "s");
draw_set_color(color[45]);
draw_text(x + (64 * 5) + random_range(0, 1), ((y + (28 * 3)) + 36) + (28 * 2) + random_range(0, 1), "t");
draw_set_color(color[46]);
draw_text(x + (64 * 6) + random_range(0, 1), ((y + (28 * 3)) + 36) + (28 * 2) + random_range(0, 1), "u");
draw_set_color(color[47]);
draw_text(x + (64 * 0) + random_range(0, 1), ((y + (28 * 3)) + 36) + (28 * 3) + random_range(0, 1), "v");
draw_set_color(color[48]);
draw_text(x + (64 * 1) + random_range(0, 1), ((y + (28 * 3)) + 36) + (28 * 3) + random_range(0, 1), "w");
draw_set_color(color[49]);
draw_text(x + (64 * 2) + random_range(0, 1), ((y + (28 * 3)) + 36) + (28 * 3) + random_range(0, 1), "x");
draw_set_color(color[50]);
draw_text(x + (64 * 3) + random_range(0, 1), ((y + (28 * 3)) + 36) + (28 * 3) + random_range(0, 1), "y");
draw_set_color(color[51]);
draw_text(x + (64 * 4) + random_range(0, 1), ((y + (28 * 3)) + 36) + (28 * 3) + random_range(0, 1), "z");

draw_set_color(color[52]);
draw_text(120, 400, "Quit");
draw_set_color(color[53]);
draw_text(240, 400, "Backspace");
draw_set_color(color[54]);
draw_text(440, 400, "Done");
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
